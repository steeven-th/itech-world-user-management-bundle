name: Auto Release

on:
  pull_request:
    types: [ closed ]
    branches: [ main ]

  # D√©clenchement manuel
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.2.3, 1.2.3-beta, 0.1.6-b)'
        required: true
        type: string
      force:
        description: 'Force release even if tag exists'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    # Condition adapt√©e pour les deux types de d√©clenchement
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       github.event.pull_request.head.ref == 'dev') ||
      (github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Logique d'extraction de version adapt√©e
      - name: Determine version
        id: determine_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Version depuis l'input manuel
            INPUT_VERSION="${{ github.event.inputs.version }}"
          
            # Validation du format
            if ! echo "$INPUT_VERSION" | grep -qP '^v?\d+\.\d+\.\d+(?:-[a-zA-Z0-9\.-]+)?(?:\+[a-zA-Z0-9\.-]+)?$'; then
              echo "‚ùå Invalid version format: '$INPUT_VERSION'"
              echo "üí° Expected: '1.2.3', '1.2.3-beta', '1.2.3-rc.1'"
              exit 1
            fi
          
            VERSION=$(echo "$INPUT_VERSION" | sed 's/^v//')
            TRIGGER_TYPE="manual"
          
          else
            # Version depuis le titre de PR
            PR_TITLE="${{ github.event.pull_request.title }}"
            VERSION=$(echo "$PR_TITLE" | grep -oP 'v?\d+\.\d+\.\d+(?:-[a-zA-Z0-9\.-]+)?(?:\+[a-zA-Z0-9\.-]+)?')
          
            if [ -z "$VERSION" ]; then
              echo "‚ùå No valid version found in: '$PR_TITLE'"
              echo "üí° Format: 'Release v1.2.3' or 'feat: new feature v1.2.3'"
              exit 1
            fi
          
            VERSION=$(echo "$VERSION" | sed 's/^v//')
            TRIGGER_TYPE="pr"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV
          echo "TRIGGER_TYPE=$TRIGGER_TYPE" >> $GITHUB_ENV
          echo "‚úÖ Version: $VERSION (triggered by: $TRIGGER_TYPE)"

      # V√©rification conditionnelle d'existence du tag
      - name: Check if version already exists
        run: |
          if git tag | grep -q "^v${{ env.VERSION }}$"; then
            if [ "${{ github.event.inputs.force }}" == "true" ]; then
              echo "‚ö†Ô∏è Tag v${{ env.VERSION }} exists but force=true, continuing..."
              echo "üóëÔ∏è Deleting existing tag..."
              git tag -d "v${{ env.VERSION }}" || true
              git push --delete origin "v${{ env.VERSION }}" || true
            else
              echo "‚ùå Tag v${{ env.VERSION }} already exists!"
              echo "üí° Use 'force=true' to override or choose a different version"
              exit 1
            fi
          else
            echo "‚úÖ Version v${{ env.VERSION }} is available"
          fi

      # Validation de la branche pour le d√©clenchement manuel
      - name: Validate branch for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT_BRANCH=$(git branch --show-current)
          if [ "$CURRENT_BRANCH" != "main" ]; then
            echo "‚ö†Ô∏è Manual release triggered from '$CURRENT_BRANCH' instead of 'main'"
            echo "üîÑ Switching to main branch..."
            git checkout main
            git pull origin main
          fi

      - name: Install dependencies
        run: |
          npm install --save-dev conventional-changelog-cli conventional-changelog-angular

      - name: Generate changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          echo "üìù Generating changelog..."
          npx conventional-changelog -p angular -i CHANGELOG.md -s

      - name: Commit and push changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "üìù No changelog changes to commit"
          else
            git add CHANGELOG.md
          
            if [ "${{ env.TRIGGER_TYPE }}" == "manual" ]; then
              COMMIT_MSG="chore(release): update changelog for v${{ env.VERSION }} [manual release]"
            else
              COMMIT_MSG="chore(release): update changelog for v${{ env.VERSION }}"
            fi
          
            git commit -m "$COMMIT_MSG"
            git push origin main
            echo "‚úÖ Changelog committed and pushed"
          fi

      - name: Create and push tag
        run: |
          if [ "${{ env.TRIGGER_TYPE }}" == "manual" ]; then
            TAG_MSG="Release version ${{ env.VERSION }} (manual release by ${{ github.actor }})"
          else
            TAG_MSG="Release version ${{ env.VERSION }}"
          fi
          
          git tag -a "${{ env.TAG_VERSION }}" -m "$TAG_MSG"
          git push origin "${{ env.TAG_VERSION }}"
          echo "üè∑Ô∏è Tag ${{ env.TAG_VERSION }} created and pushed"

      - name: Generate release notes
        run: |
          echo "üìù Generating release notes..."
          
          # G√©n√®re les notes de release
          npx conventional-changelog -p angular -r 1 --output-unreleased > latest-changelog.md
          
          # Ajoute une note si c'est un d√©clenchement manuel
          if [ "${{ env.TRIGGER_TYPE }}" == "manual" ]; then
            echo "" >> latest-changelog.md
            echo "---" >> latest-changelog.md
            echo "" >> latest-changelog.md
            echo "üöÄ **Manual release triggered by @${{ github.actor }}**" >> latest-changelog.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_VERSION }}
          name: "Release ${{ env.TAG_VERSION }}"
          body_path: latest-changelog.md
          draft: false
          prerelease: ${{ contains(env.VERSION, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge main into dev
        # Seulement si on est sur main et que dev existe
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/dev; then
            echo "üîÑ Synchronizing dev branch..."
            git fetch origin dev
            git checkout dev
            git merge main --no-ff -m "chore: sync dev with main after release ${{ env.TAG_VERSION }}"
            git push origin dev
            echo "‚úÖ Dev branch synchronized"
          else
            echo "‚ÑπÔ∏è No dev branch found, skipping sync"
          fi

      # Notification de succ√®s
      - name: Release summary
        run: |
          echo "üéâ **Release Summary**"
          echo "‚úÖ Version: ${{ env.TAG_VERSION }}"
          echo "‚úÖ Trigger: ${{ env.TRIGGER_TYPE }}"
          echo "‚úÖ Actor: ${{ github.actor }}"
          echo "‚úÖ Packagist will auto-update within 5-10 minutes"
          echo ""
          echo "üîó **Links:**"
          echo "- Release: https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG_VERSION }}"
          echo "- Packagist: https://packagist.org/packages/itech-world/user-management-bundle"
